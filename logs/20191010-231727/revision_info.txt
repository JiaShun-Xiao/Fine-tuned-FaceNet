arguments: src/train_softmax.py --pretrained_model /home/jxiaoae/face/facenet_embedding/model/20170512-110547/model-20170512-110547.ckpt-250000 --logs_base_dir ../logs-ms-celeb-1m-vgg_softmax_center_128/ --models_base_dir ../model-ms-celeb-1m-vgg_softmax_center_128/ --data_dir /home/share/xiaojs/database/VGG_face/train_mtcnnpy_182/ --image_size 160 --model_def models.inception_resnet_v1 --lfw_dir /home/jxiaoae/face/facenet_embedding/datasets/lfw/lfw_mtcnnpy_160 --optimizer RMSPROP --learning_rate 5e-3 --learning_rate_decay_factor 0.5 --learning_rate_decay_epochs 50 --max_nrof_epochs 200 --batch_size 90 --keep_probability 0.8 --random_flip --random_crop --center_loss_factor 5e-2 --center_loss_alfa 0.9 --learning_rate_schedule_file data/learning_rate_schedule_classifier_vggface2.txt --weight_decay 5e-5 --embedding_size 128 --lfw_distance_metric 1 --validation_set_split_ratio 0.01 --validate_every_n_epochs 5 --gpu 4
--------------------
tensorflow version: 1.13.1
--------------------
git hash: b'096ed770f163957c1e56efa7feeb194773920f6e'
--------------------
b'diff --git a/src/align/align_dataset_mtcnn.py b/src/align/align_dataset_mtcnn.py\nindex 7d5e735..0fca31b 100644\n--- a/src/align/align_dataset_mtcnn.py\n+++ b/src/align/align_dataset_mtcnn.py\n@@ -36,7 +36,9 @@ import align.detect_face\n import random\n from time import sleep\n \n+\n def main(args):\n+    os.environ["CUDA_VISIBLE_DEVICES"] = args.gpu\n     sleep(random.random())\n     output_dir = os.path.expanduser(args.output_dir)\n     if not os.path.exists(output_dir):\n@@ -153,6 +155,7 @@ def parse_arguments(argv):\n         help=\'Upper bound on the amount of GPU memory that will be used by the process.\', default=1.0)\n     parser.add_argument(\'--detect_multiple_faces\', type=bool,\n                         help=\'Detect and align multiple faces per image.\', default=False)\n+    parser.add_argument(\'--gpu\', type=str, help=\'gpu index.\', default=\'8\')\n     return parser.parse_args(argv)\n \n if __name__ == \'__main__\':\ndiff --git a/src/train_softmax.py b/src/train_softmax.py\nindex 6b0b28b..c7dae28 100644\n--- a/src/train_softmax.py\n+++ b/src/train_softmax.py\n@@ -43,8 +43,11 @@ import tensorflow.contrib.slim as slim\n from tensorflow.python.ops import data_flow_ops\n from tensorflow.python.framework import ops\n from tensorflow.python.ops import array_ops\n+import os\n \n def main(args):\n+    \n+    os.environ["CUDA_VISIBLE_DEVICES"] = args.gpu\n   \n     network = importlib.import_module(args.model_def)\n     image_size = (args.image_size, args.image_size)\n@@ -181,7 +184,10 @@ def main(args):\n             learning_rate, args.moving_average_decay, tf.global_variables(), args.log_histograms)\n         \n         # Create a saver\n-        saver = tf.train.Saver(tf.trainable_variables(), max_to_keep=3)\n+        #saver = tf.train.Saver(tf.trainable_variables(), max_to_keep=3)\n+        set_A_vars = [v for v in tf.trainable_variables() if v.name.startswith(\'InceptionResnetV1\')]\n+        saver_set_A = tf.train.Saver(set_A_vars, max_to_keep=3)\n+        saver_set_A_and_B = tf.train.Saver(tf.trainable_variables(), max_to_keep=3)\n \n         # Build the summary operation based on the TF collection of Summaries.\n         summary_op = tf.summary.merge_all()\n@@ -199,7 +205,10 @@ def main(args):\n \n             if pretrained_model:\n                 print(\'Restoring pretrained model: %s\' % pretrained_model)\n-                saver.restore(sess, pretrained_model)\n+                #saver.restore(sess, pretrained_model)\n+                sess.run(tf.global_variables_initializer())\n+                sess.run(tf.local_variables_initializer())\n+                saver_set_A.restore(sess, pretrained_model)\n \n             # Training and validation loop\n             print(\'Running training\')\n@@ -245,7 +254,7 @@ def main(args):\n                 stat[\'time_validate\'][epoch-1] = time.time() - t\n \n                 # Save variables and the metagraph if it doesn\'t exist already\n-                save_variables_and_metagraph(sess, saver, summary_writer, model_dir, subdir, epoch)\n+                save_variables_and_metagraph(sess, saver_set_A_and_B, summary_writer, model_dir, subdir, epoch)\n \n                 # Evaluate on LFW\n                 t = time.time()\n@@ -257,7 +266,7 @@ def main(args):\n \n                 print(\'Saving statistics\')\n                 with h5py.File(stat_file_name, \'w\') as f:\n-                    for key, value in stat.iteritems():\n+                    for key, value in stat.items():\n                         f.create_dataset(key, data=value)\n     \n     return model_dir\n@@ -573,6 +582,7 @@ def parse_arguments(argv):\n         help=\'Concatenates embeddings for the image and its horizontally flipped counterpart.\', action=\'store_true\')\n     parser.add_argument(\'--lfw_subtract_mean\', \n         help=\'Subtract feature mean before calculating distance.\', action=\'store_true\')\n+    parser.add_argument(\'--gpu\', type=str, help=\'gpu index.\', default=\'8\')\n     return parser.parse_args(argv)\n   \n \ndiff --git a/src/train_tripletloss.py b/src/train_tripletloss.py\nindex d6df19a..2bf300c 100644\n--- a/src/train_tripletloss.py\n+++ b/src/train_tripletloss.py\n@@ -38,13 +38,16 @@ import itertools\n import argparse\n import facenet\n import lfw\n+import os\n \n from tensorflow.python.ops import data_flow_ops\n \n from six.moves import xrange  # @UnresolvedImport\n \n def main(args):\n-  \n+    \n+    os.environ["CUDA_VISIBLE_DEVICES"] = args.gpu\n+    \n     network = importlib.import_module(args.model_def)\n \n     subdir = datetime.strftime(datetime.now(), \'%Y%m%d-%H%M%S\')\n@@ -479,6 +482,7 @@ def parse_arguments(argv):\n         help=\'Path to the data directory containing aligned face patches.\', default=\'\')\n     parser.add_argument(\'--lfw_nrof_folds\', type=int,\n         help=\'Number of folds to use for cross validation. Mainly used for testing.\', default=10)\n+    parser.add_argument(\'--gpu\', type=str, help=\'gpu index.\', default=\'8\')\n     return parser.parse_args(argv)\n   \n \ndiff --git a/src/validate_on_lfw.py b/src/validate_on_lfw.py\nindex ac456c5..3736d48 100644\n--- a/src/validate_on_lfw.py\n+++ b/src/validate_on_lfw.py\n@@ -42,6 +42,7 @@ from scipy.optimize import brentq\n from scipy import interpolate\n \n def main(args):\n+    os.environ["CUDA_VISIBLE_DEVICES"] = args.gpu\n   \n     with tf.Graph().as_default():\n       \n@@ -158,6 +159,7 @@ def parse_arguments(argv):\n         help=\'Subtract feature mean before calculating distance.\', action=\'store_true\')\n     parser.add_argument(\'--use_fixed_image_standardization\', \n         help=\'Performs fixed standardization of images.\', action=\'store_true\')\n+    parser.add_argument(\'--gpu\', type=str, help=\'gpu index.\', default=\'8\')\n     return parser.parse_args(argv)\n \n if __name__ == \'__main__\':'